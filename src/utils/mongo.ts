// ===============================
// File: src/utils/mongo.ts
// ===============================

import mongoose from 'mongoose';
import { logger } from './logger';
import { env } from '../config/env'; // ‚úÖ Corre√ß√£o: usa env tipado

export async function connectMongo(): Promise<void> {
  const mongoUri = env.MONGO_URL; // ‚úÖ Correto e validado com Zod

  logger.info('[mongo] üì¶ Iniciando rotina de conex√£o com MongoDB...');

  if (!mongoUri) {
    logger.error('[mongo] ‚ùå MONGO_URL n√£o est√° definida nas vari√°veis de ambiente.');
    throw new Error('MONGO_URL n√£o definida');
  }

  logger.debug(`[mongo] URI recebida: ${mongoUri}`);

  try {
    logger.info('[mongo] ‚è≥ Tentando se conectar ao MongoDB...');

    await mongoose.connect(mongoUri, {
      dbName: 'bot_whatsapp',
      serverSelectionTimeoutMS: 5000, // ‚è±Ô∏è timeout de seguran√ßa
    });

    logger.info('[mongo] ‚úÖ mongoose.connect() finalizou com sucesso'); // ‚úÖ Log imediato ap√≥s conex√£o

    const connection = mongoose.connection;

    connection.on('connected', () => {
      logger.info('[mongo] ‚úÖ Conectado com sucesso ao MongoDB');
    });

    connection.on('error', (err) => {
      logger.error('[mongo] ‚ùå Erro de conex√£o detectado ap√≥s conectar', { error: err });
    });

    connection.on('disconnected', () => {
      logger.warn('[mongo] ‚ö†Ô∏è Conex√£o com MongoDB foi perdida');
    });

    connection.on('reconnected', () => {
      logger.info('[mongo] üîÑ Conex√£o com MongoDB foi restabelecida');
    });
  } catch (error: any) {
    logger.error('[mongo] ‚ùå Erro fatal ao tentar conectar ao MongoDB');
    logger.error(`[mongo] Mensagem: ${error.message}`);
    logger.error(`[mongo] Stack: ${error.stack}`);
    process.exit(1);
  }
}
